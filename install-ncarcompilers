#!/bin/bash
#HPCI -n ncarcompilers
#HPCI -v 0.4
#HPCI -l git
#HPCI -u https://github.com/NCAR/ncarcompilers

set -e

# saving current status of the repo
branch=$(git symbolic-ref --short -q HEAD)
if [ -z "${branch}" ]; then
  tag=$(git name-rev --name-only --tags --no-undefined HEAD 2>/dev/null | sed -n 's/^\([^^~]\{1,\}\)\(\^0\)\{0,1\}$/\1/p')
  branch=tags/${tag}
fi

# switching to desired version
git checkout -q tags/v${HPCI_SW_VERSION}

tag_checkedout=$?
if [ $tag_checkedout -ne 0 ]; then
  echo "Can't checkout version ${HPCI_SW_VERSION} aborting"
  exit $tag_checkedout
fi

# if successfull, create directory and copy relevant files
mkdir -p $HPCI_SW_DIR
for file in *; do
    if [[ $file != install-ncarcompiler* && \
          $file != hpci.*.log &&            \
          $file != test_helper.py &&        \
          $file != test_wrapper.py ]]; then \
      cp -r $file $HPCI_SW_DIR              # preserving symbolic links
    fi
done

syslinks=()
actual_files=()
echo "Figuring out where to put the modules"
for stuff in `find $HPCI_MOD_DIR -name $HPCI_SW_NAME`; do
    echo "Trying $stuff"
    if [ -L $stuff ]; then
        syslinks+=($stuff)
    elif [ -f $file ]; then
        actual_files+=($stuff)
    fi
done
echo "Found syslinks: $syslinks"
echo "Found actual_files: $actual_files"

if [ ${#actual_files[@]} -ne 1 ]; then
    echo "Can't find where to put the module, maybe you are not using CheyenneModules??"
    exit 1
fi

actual_file=$actual_files/${HPCI_SW_VERSION}.lua  # only one element, $HPCI_SW_NAME already part of the filename because of find

# syslinks automatically managed by CheyenneModule, now
#for needed_syslink in ${needed_syslinks[*]}; do
#    echo $needed_syslink
#done


# Create the module with the following template
cat << EOF > $actual_file
require("posix")

-- The message printed by the module whatis command
whatis("ncarcompilers version v$HPCI_SW_VERSION")

-- The message printed by the module help command
help([[
This module loads the NCAR compiler wrappers, that wraps the usual
serial and parallel compilers to include all the required libraries
and header files.
]])

local basepath = "$HPCI_SW_DIR"         -- base path
local mpipath  = basepath .. "/mpi"

setenv("NCAR_EXCLUDE_ASNEEDED", "1")
setenv("NCAR_WRAPPER_MPI", mpipath)

-- Set paths for serial and MPI wrappers
prepend_path("PATH",mpipath)
prepend_path("PATH",basepath)
EOF

echo "-----"
echo Git repository for the modules status, checked in $HPCI_MOD_DIR
(cd $HPCI_MOD_DIR; git status)

echo "-----"
echo In current directory, you may restore the previous status of the repo with
echo git checkout $branch
echo "-----"
